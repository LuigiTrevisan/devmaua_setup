name: Create Repo

on:
  issues:
    types: [opened, edited]

jobs:
  process_issue:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Print issue title and body
        run: |
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Issue body: ${{ github.event.issue.body }}"
          
      - name: Process issue
        if: startsWith(github.event.issue.title, '[NEW_REPO]')
        run: |
          echo "Processing issue with title starting with [NEW_REPO]"
          echo "${{ github.event.issue.body }}" > project_details.txt

          project_name=$(grep -A 2 "### project_name" project_details.txt | tail -n 1)
          description=$(grep -A 2 "### description" project_details.txt | tail -n 1)
          privacy_type=$(grep -A 2 "### privacy_type" project_details.txt | tail -n 1)
          project_template=$(grep -A 2 "### project_template" project_details.txt | tail -n 1)
          CI_CD=$(grep -A 2 "### CI_CD" project_details.txt | tail -n 1)
          
          echo "Project Name: $project_name"
          echo "Description: $description"
          echo "Privacy Type: $privacy_type"
          echo "Project Template: $project_template"
          echo "CI_CD: $CI_CD"

          echo "project_name=$project_name" >> $GITHUB_ENV
          echo "description=$description" >> $GITHUB_ENV
          echo "privacy_type=$privacy_type" >> $GITHUB_ENV
          echo "project_template=$project_template" >> $GITHUB_ENV
          echo "CI_CD=$CI_CD" >> $GITHUB_ENV

  create_repo:
    needs: process_issue
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[NEW_REPO]')
    steps:
      - name: Create Repo
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            const project_name = process.env.project_name;
            const description = process.env.description;
            const privacy_type = process.env.privacy_type;
            const project_template = process.env.project_template;
            const CI_CD = process.env.CI_CD;
            const repo = await github.repos.createInOrg({
              org: 'sudharsan-selvaraj',
              name: project_name,
              description: description,
              private: privacy_type,
              visibility: 'public',
              template: true,
              gitignore_template: 'Node',
              license_template: 'mit'
            });
            console.log(repo);

        